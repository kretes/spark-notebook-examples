{
  "metadata" : {
    "name" : "UserEventsDemo",
    "user_save_timestamp" : "1970-01-01T01:00:00.000Z",
    "auto_save_timestamp" : "1970-01-01T01:00:00.000Z",
    "language_info" : {
      "name" : "scala",
      "file_extension" : "scala",
      "codemirror_mode" : "text/x-scala"
    },
    "trusted" : true,
    "customLocalRepo" : null,
    "customRepos" : null,
    "customDeps" : null,
    "customImports" : null,
    "customSparkConf" : null
  },
  "cells" : [ {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "import sys.process._\nprintln(\"head /data/userEvents/part-00000\"!!)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "warning: there were 1 feature warning(s); re-run with -feature for details\n219,B,1970-01-18T09:46:28.651+01:00\n438,P,1970-01-17T19:32:37.536+01:00\n657,P,1970-01-09T03:36:02.751+01:00\n876,B,1970-01-10T12:22:00.884+01:00\n1095,P,1970-01-10T01:36:03.044+01:00\n1314,P,1970-01-19T17:48:01.284+01:00\n1533,P,1970-01-07T21:34:42.142+01:00\n1752,P,1970-01-18T19:02:27.071+01:00\n1971,P,1970-01-06T17:04:16.665+01:00\n2190,P,1970-01-24T15:24:11.537+01:00\n\nimport sys.process._\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "\n <div class='pull-right text-info'><small>628 milliseconds</small></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 1
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "import org.joda.time.DateTime\ntype UserId = String\n  type EventType = String\n\n  case class UserEvent(userId: UserId, eventType: EventType, dateTime: DateTime) {\n    def isPageView = eventType == \"P\"\n  }\n\n  def parseToUserEvent(line: String) = {\n    val split: Array[String] = line.split(\",\")\n    split match {\n      case Array(userId, eventType, dateTime) => UserEvent(userId, eventType, DateTime.parse(dateTime))\n    }\n  }",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.joda.time.DateTime\ndefined type alias UserId\ndefined type alias EventType\ndefined class UserEvent\nparseToUserEvent: (line: String)UserEvent\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "\n <div class='pull-right text-info'><small>604 milliseconds</small></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 2
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "val preparedRdd = \n   sparkContext.textFile(\"/data/userEvents\")\n    .map(parseToUserEvent)\n    .filter(_.isPageView)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "preparedRdd: org.apache.spark.rdd.RDD[UserEvent] = MapPartitionsRDD[3] at filter at <console>:49\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "MapPartitionsRDD[3] at filter at &lt;console&gt;:49\n <div class='pull-right text-info'><small>863 milliseconds</small></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 3
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "val aggregateRdd = preparedRdd.groupBy(_.userId)\n    .sortBy(_._2.size, false)\n    .map { case (userId, userEvents) => \n          s\"$userId,${userEvents.size}\" }",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "aggregateRdd: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[11] at map at <console>:50\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "MapPartitionsRDD[11] at map at &lt;console&gt;:50\n <div class='pull-right text-info'><small>8 seconds 96 milliseconds</small></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 4
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "aggregateRdd.take(10).foreach(println)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "42048,1061\n16644,1060\n189435,1053\n196005,1053\n161184,1051\n195348,1051\n47961,1050\n21462,1050\n146949,1050\n87162,1050\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "\n <div class='pull-right text-info'><small>6 seconds 45 milliseconds</small></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 5
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "aggregateRdd.saveAsTextFile(\"/data/pageViewAgg5\")",
    "outputs" : [ {
      "metadata" : { },
      "data" : {
        "text/html" : "\n <div class='pull-right text-info'><small>7 seconds 44 milliseconds</small></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 6
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "println(\"head /data/pageViewAgg5/part-00000\"!!)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "warning: there were 1 feature warning(s); re-run with -feature for details\n42048,1061\n16644,1060\n189435,1053\n196005,1053\n161184,1051\n195348,1051\n47961,1050\n21462,1050\n146949,1050\n87162,1050\n\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "\n <div class='pull-right text-info'><small>414 milliseconds</small></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 7
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : true
    },
    "cell_type" : "code",
    "source" : "",
    "outputs" : [ ]
  } ],
  "nbformat" : 4
}